"""
Django settings for riotcat project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
# import ldap
# from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@!bk!%1uz4*mkg=e+)w&6o)!b1v4w3=@fec8anbkyf(5nzye9q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '[::1]']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'ckeditor_uploader',
    'ckeditor',
    'worktime',
]

CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "uploads/"

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = [
    #    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
]

# AUTH_LDAP_SERVER_URI = "ldap://ldap"
# AUTH_LDAP_BIND_DN = "uid=django,ou=people,ou=Anwendung,dc=riotcat,dc=org"
# AUTH_LDAP_BIND_PASSWORD = ""
# AUTH_LDAP_USER_SEARCH = LDAPSearch(
#     "ou=people,dc=riotcat,dc=org", ldap.SCOPE_SUBTREE, "(&(uid=%(user)s)(memberof=cn=django,ou=groups,dc=django,dc=riotcat,dc=org))"
# )
# AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
#     "ou=django,ou=groups,dc=riotcat,dc=org",
#     ldap.SCOPE_SUBTREE,
#     "(objectClass=groupOfNames)",
# )
# AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")
# AUTH_LDAP_REQUIRE_GROUP = "cn=django,ou=groups,dc=django,dc=riotcat,dc=org"
# AUTH_LDAP_DENY_GROUP = "cn=disabled,ou=groups,dc=django,dc=riotcat,dc=org"
# AUTH_LDAP_USER_ATTR_MAP = {
#     "first_name": "givenName",
#     "last_name": "sn",
#     "email": "mail",
# }
# AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#     "is_active": "cn=django,ou=groups,dc=django,dc=riotcat,dc=org",
#     "is_staff": " cn=staff,ou=groups,dc=django,dc=riotcat,dc=org",
#     "is_superuser": " cn=admin,ou=groups,dc=django,dc=riotcat,dc=org",
# }
# AUTH_LDAP_ALWAYS_UPDATE_USER = True
# AUTH_LDAP_FIND_GROUP_PERMS = True

ROOT_URLCONF = 'riotcat.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'riotcat.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# STATIC_ROOT = os.path.join(BASE_DIR, 'static/web')
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
STATIC_URL = '/static/'

LOGIN_URL = '/admin/login/'
SESSION_COOKIE_DOMAIN = ".riotcat.org"

try:
    from .development_settings import *
except ImportError:
    pass

try:
    from .production_settings import *
except ImportError:
    pass
